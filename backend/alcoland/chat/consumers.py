import json
import asyncio
from django.utils.timezone import now
from channels.generic.websocket import AsyncWebsocketConsumer
from channels.db import database_sync_to_async
from django.contrib.auth import get_user_model
from .models import Message, Chat

User = get_user_model()

class ChatConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        """–ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ WebSocket"""
        try:
            self.chat_id = self.scope['url_route']['kwargs']['chat_id']
            self.room_group_name = f'chat_{self.chat_id}'

            # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –≥—Ä—É–ø–ø–µ
            await self.channel_layer.group_add(self.room_group_name, self.channel_name)
            await self.accept()

            print(f"‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω: —á–∞—Ç {self.chat_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ WebSocket: {e}")
            await self.close()

    async def disconnect(self, close_code):
        """–ü—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            await self.channel_layer.group_discard(self.room_group_name, self.channel_name)
            print(f"üî¥ WebSocket –æ—Ç–∫–ª—é—á–µ–Ω: —á–∞—Ç {self.chat_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏: {e}")

    async def receive(self, text_data):
        print(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text_data}")

        try:
            data = json.loads(text_data)
            message_text = data.get("text", "").strip()
            sender_id = data.get("sender_id")

            print(f"üìå –†–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: message_text={message_text}, sender_id={sender_id}, chat_id={self.chat_id}")

            if not message_text or not sender_id:
                print("‚ùå –û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ sender_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            message = await self.save_message(sender_id, message_text)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ WebSocket
            await self.channel_layer.group_send(
                self.room_group_name,
                {
                    "type": "chat_message",
                    "message": message.text,
                    "sender_id": message.sender.id,
                    "sender_nickname": message.sender.username,
                    "created_at": message.created_at.strftime("%Y-%m-%d %H:%M:%S"),
                },
            )

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ receive(): {e}")


    async def chat_message(self, event):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ WebSocket"""
        try:
            await self.send(text_data=json.dumps({
                "message": event["message"],
                "sender_id": event["sender_id"],
                "sender_nickname": event["sender_nickname"],
                "created_at": event["created_at"],
            }))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ chat_message(): {e}")

    @database_sync_to_async
    def get_user(self, sender_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã"""
        try:
            return User.objects.get(id=sender_id)
        except User.DoesNotExist:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {sender_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None

    @database_sync_to_async
    def get_chat(self, chat_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —á–∞—Ç –∏–∑ –±–∞–∑—ã"""
        try:
            return Chat.objects.get(id=chat_id)
        except Chat.DoesNotExist:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ß–∞—Ç —Å ID {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None

    async def save_message(self, sender_id, message_text):
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î: sender_id={sender_id}, chat_id={self.chat_id}, text={message_text}")

        try:
            sender = await database_sync_to_async(User.objects.get)(id=sender_id)
            chat = await database_sync_to_async(Chat.objects.get)(id=self.chat_id)

            message = await database_sync_to_async(Message.objects.create)(
                chat=chat, sender=sender, text=message_text, created_at=now()
            )

            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {message.id}")

            return message

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ save_message(): {e}")


