from rest_framework import serializers
from django.contrib.auth import password_validation
from rest_framework_simplejwt.serializers import TokenObtainPairSerializer
from rest_framework_simplejwt.views import TokenObtainPairView

from .models import CustomUser, NewsFeed, NewsFeedComments

class ChangePasswordSerializer(serializers.Serializer):
    old_password = serializers.CharField(required=True)
    new_password = serializers.CharField(required=True)

    def validate_new_password(self, value):
        password_validation.validate_password(value)
        return value

class CustomTokenObtainPairSerializer(TokenObtainPairSerializer):
    @classmethod
    def get_token(cls, user):
        token = super().get_token(user)
        token['nickname'] = user.nickname  # –î–æ–±–∞–≤–ª—è–µ–º nickname –≤ —Ç–æ–∫–µ–Ω
        return token

    def validate(self, attrs):
        email = attrs.get("email")  # –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ email
        password = attrs.get("password")

        user = CustomUser.objects.filter(email=email).first()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
        if user and user.check_password(password):
            return super().validate(attrs)  # –û—Ç–¥–∞–µ–º —Ç–æ–∫–µ–Ω
        raise serializers.ValidationError("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å")


class CustomTokenObtainPairView(TokenObtainPairView):
    serializer_class = CustomTokenObtainPairSerializer


class CustomUserSerializer(serializers.ModelSerializer):
    friends = serializers.PrimaryKeyRelatedField(queryset=CustomUser.objects.all(), many=True)
    following = serializers.PrimaryKeyRelatedField(queryset=CustomUser.objects.all(), many=True)
    followers = serializers.PrimaryKeyRelatedField(queryset=CustomUser.objects.all(), many=True)
    city_display = serializers.CharField(source="get_city_display", read_only=True)
    ignored_requests = serializers.PrimaryKeyRelatedField(many=True, read_only=True)
    image = serializers.ImageField(read_only=True)

    class Meta:
        model = CustomUser
        exclude = ("city",)

    def update(self, instance, validated_data):
        # üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ upload_to
        image = validated_data.get("image", None)
        if image and not hasattr(image, 'file'):
            # –≠—Ç–æ –Ω–µ —Ñ–∞–π–ª, –∞ —Å—Ç—Ä–æ–∫–∞ (—Å—Ç–∞—Ä—ã–π –ø—É—Ç—å) ‚Äî —É–¥–∞–ª—è–µ–º
            validated_data.pop("image")

        # üëá –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π, –∫—Ä–æ–º–µ —Å–≤—è–∑–µ–π
        for attr, value in validated_data.items():
            setattr(instance, attr, value)

        instance.save()
        return instance



class NewsFeedSerializer(serializers.ModelSerializer):
    profile_id = serializers.SerializerMethodField()

    class Meta:
        model = NewsFeed
        fields = ['id', 'profile_id', 'text', 'file', 'created_at']

    def get_profile_id(self, obj):
        return obj.profile.id

class NewsFeedCommentsSerializer(serializers.ModelSerializer):
    profile_id = serializers.ReadOnlyField(source='profile.id')
    newsfeed_id = serializers.ReadOnlyField(source='newsfeed.id')

    class Meta:
        model = NewsFeedComments
        fields = ['id', 'profile_id', 'newsfeed_id', 'text', 'created_at']

    def create(self, validated_data):
        request = self.context.get("request")
        profile = request.user  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        newsfeed_id = self.initial_data.get("newsfeed_id")  # –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        newsfeed = NewsFeed.objects.get(id=newsfeed_id)  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç NewsFeed
        return NewsFeedComments.objects.create(profile=profile, newsfeed=newsfeed, **validated_data)

