from rest_framework import viewsets
from rest_framework.views import APIView
from rest_framework.decorators import action
from rest_framework.permissions import IsAuthenticated
from django.contrib.auth import authenticate
from rest_framework.response import Response
from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView
from .serializers import CustomTokenObtainPairSerializer, ChangePasswordSerializer
from rest_framework.decorators import api_view, permission_classes

from .models import CustomUser, NewsFeed, NewsFeedComments
from .serializers import CustomUserSerializer, NewsFeedSerializer, NewsFeedCommentsSerializer
from rest_framework import generics
from rest_framework.response import Response
from rest_framework import status

class CustomTokenObtainPairView(TokenObtainPairView):
    serializer_class = CustomTokenObtainPairSerializer


class RegisterView(generics.CreateAPIView):
    queryset = CustomUser.objects.all()
    serializer_class = CustomUserSerializer

    def create(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        if serializer.is_valid():
            user = serializer.save()
            return Response(CustomUserSerializer(user).data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class ChangePasswordView(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request):
        serializer = ChangePasswordSerializer(data=request.data)
        user = request.user

        if serializer.is_valid():
            old_password = serializer.validated_data['old_password']
            new_password = serializer.validated_data['new_password']

            if not user.check_password(old_password):
                return Response({'old_password': '–°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–µ–Ω.'}, status=status.HTTP_400_BAD_REQUEST)

            user.set_password(new_password)
            user.save()
            return Response({'status': '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω'})

        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class CustomUserViewSet(viewsets.ModelViewSet):
    queryset = CustomUser.objects.all()
    serializer_class = CustomUserSerializer
    # permission_classes = [IsAuthenticated]

    def update(self, request, *args, **kwargs):
        partial = kwargs.pop("partial", False)
        instance = self.get_object()
        serializer = self.get_serializer(instance, data=request.data, partial=partial)

        serializer.is_valid(raise_exception=True)

        # –ó–∞—â–∏—Ç–∞: –µ—Å–ª–∏ image ‚Äî —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, —É–¥–∞–ª—è–µ–º
        image = request.FILES.get("image", None)
        if not image and "image" in serializer.validated_data:
            serializer.validated_data.pop("image")

        self.perform_update(serializer)

        return Response(serializer.data)

    @action(detail=False, methods=["get"], url_path="me")
    def me(self, request):
        serializer = self.get_serializer(request.user)
        return Response(serializer.data)

    @action(detail=True, methods=["get"])
    def friends(self, request, pk=None):
        user = self.get_object()
        friends = user.friends.all()
        serializer = CustomUserSerializer(friends, many=True)
        return Response(serializer.data)

    @action(detail=True, methods=["post"])
    def add_friend(self, request, pk=None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è (–≤–∑–∞–∏–º–Ω–∞—è –¥—Ä—É–∂–±–∞)"""
        user = request.user
        friend = self.get_object()

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥—Ä—É–∑—å—è (–¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ)
        user.friends.add(friend)
        friend.friends.add(user)

        # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏)
        user.following.remove(friend)
        user.followers.remove(friend)
        friend.following.remove(user)
        friend.followers.remove(user)

        return Response({"status": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥—Ä—É–∑—å—è"})

    # –î–ª—è –∑–∞—è–≤–æ–∫ –≤ –¥—Ä—É–∑—å—è
    @action(detail=True, methods=["post"])
    def ignore_request(self, request, pk=None):
        user = request.user
        target = self.get_object()

        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ—Ç –Ω–∞ –Ω–µ–≥–æ –ø–æ–¥–ø–∏—Å–∞–Ω
        if user.followers.filter(id=target.id).exists():
            user.ignored_requests.add(target)
            return Response({"status": "–∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"})

        return Response({"error": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"}, status=400)

    @action(detail=True, methods=["post"])
    def remove_friend(self, request, pk=None):
        user = request.user
        friend = self.get_object()

        # –£–¥–∞–ª—è–µ–º –¥—Ä—É–∂–±—É –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
        user.friends.remove(friend)
        friend.friends.remove(user)

        # –î—Ä—É–≥ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º
        friend.following.add(user)
        user.ignored_requests.add(friend)  # üëà –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ –Ω–∞ –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è

        return Response({"status": "–¥—Ä—É–≥ —É–¥–∞–ª—ë–Ω, –∏ —Ç–µ–ø–µ—Ä—å –ø–æ–¥–ø–∏—Å—á–∏–∫"})

    @action(detail=True, methods=["post"])
    def follow(self, request, pk=None):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = request.user
        target_user = self.get_object()
        user.follow(target_user)
        return Response({"status": "Following"})

    @action(detail=True, methods=["post"])
    def unfollow(self, request, pk=None):
        """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = request.user
        target_user = self.get_object()
        user.unfollow(target_user)
        return Response({"status": "Unfollowed"})

    @action(detail=True, methods=["post"])
    def remove_follower(self, request, pk=None):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
        user = request.user
        follower_user = self.get_object()
        follower_user.unfollow(user)
        return Response({"status": "Follower removed"})


class NewsFeedViewSet(viewsets.ModelViewSet):
    queryset = NewsFeed.objects.all()
    serializer_class = NewsFeedSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        queryset = NewsFeed.objects.all()
        profile_id = self.request.query_params.get('profile')
        if profile_id:
            queryset = queryset.filter(profile_id=profile_id)
        return queryset


class NewsFeedCommentsViewSet(viewsets.ModelViewSet):
    queryset = NewsFeedComments.objects.all()
    serializer_class = NewsFeedCommentsSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        queryset = NewsFeedComments.objects.all()
        newsfeed_id = self.request.query_params.get('newsfeed')
        if newsfeed_id:
            queryset = queryset.filter(newsfeed_id=newsfeed_id)
        return queryset

    def get_serializer_context(self):
        context = super().get_serializer_context()
        context["request"] = self.request  # –ü–µ—Ä–µ–¥–∞–µ–º request –≤ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
        return context